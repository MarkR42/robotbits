TODO things


1. In motors module, initialise esc telemetry uart
    - Use a GPIO pin which we can access on dev board.
    DONE
    
1. Get esc telemetry received 
    decipher esc telemetry.
    OK Done.
    
1. Motors module should check telemetry is working during initialisation,
    on both ESCs.
    
We can do motor initialisation in parallel, there are some
delays necessary to wait for the ESCs to startup in the case of power
on.

Also disarm the ESC by waiting some time (1 sec?) with no commands
    sent, there is no other way to disarm that I know
    
1. Dshot working 600k


---

1. Controller and wifi interface should set some values in a
    global struct - for 
    struct controller_inputs {
        int16_t spin_throttle; // -1000 ... 1000
        int16_t drive_throttle;
        int16_t steering; // -1000 .. 1000
        // other controls as necessary?
        // Flash lights, beep?
    }
    
    If spin_throttle is 0, then we go into "driving" mode.
    
1. ESC Telemetry data and input data - 
    store them in a log array and write to files.
    
    * When we start spinning -orwhen we get a spin throttle signal,
    start recording telemetry
    
    * When we stop spinning - zero rpm and no throttle signal - 
    stop recording telemetry and save the file.

1. Record more frequent telemetry
    - Calculate how often we can request telemetry ?
        - Request telemetry more often.
    - Store more samples

1. Calculate, from telemetry, spin speed dynamically:
    - Use the values from both esc
    - Do some kind of averaging to smooth out bumps
    - Take into account the wheel diameter and wheel track diameter
        (ratio)
1. Main melty routine:
    - From spin speed, approximate the "current heading" of the robot
        relative to the "virtual front"
    - Flash the led when it is close to the virtual front
        - LED offset from the "physical front" of the robot
    - Determine the virtual / physical offset of the motors
        
1. Translation
    Melty algorithm: based on the translation, throttle motors
        based on their angle to the virtual heading.
        - Must not send dshot commands too often so that the previous
            command isn't finished
        - Must send the dshot commands early to account for dshot
            latency - which is low, but exists
        - How much do we throttle the (virtual) left / right motors?
        
        - "Prograde" motor - needs to have HIGHER throttle
        - "Retrograde" motor - needs to have lower throttle, or brake
            - Maybe 0
        - When the motors are neither prograde or retro, do they
            have the "standard throttle setting"
        - Take into account the drive stick position, so we can
            go "forward" or "back" ?!?
            
            

    


    
-----


ERPM:
-----

Motors have 12 magnets. These are in pairs (N/S)
ERPM is the number of commutations per minute, for all phases, so
we need to divide by half the number of poles,

SO RPM = ERPM / 6

At throttle 50, ERPM = 10000 RPM = 1666
At throttle 100, ERPM = 16000 RPM = 2666
Throttle 200 ERPM = 31500
Throttle 400 ERPM = 62000
Throttle 500 ERPM = 76000 RPM = 12666
Throttle 1000 ERPM = 150000 RPM = 25k


--
Speed of rotation of robot

The diameter of the wheels is not the same as the circle they make
on the floor.

Circle = approx 46mm
wheel = approx 18mm (motor can=15mm)

approx 2.5*

At throttle 100, RPM(motor) = 2666, RPM(robot)= ~ 1000

At 1000 RPM (16 revs/s) blade diameter 110mm = 5529 mm /sec 




